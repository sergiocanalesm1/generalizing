# Generated by Django 4.0.2 on 2022-03-02 14:21

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatesMixin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_creation_date', models.DateTimeField(auto_now_add=True, db_column='creation_date', verbose_name='Creation Date')),
            ],
        ),
        migrations.CreateModel(
            name='RelationContext',
            fields=[
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_place', models.CharField(db_column='place', max_length=240, verbose_name='Place')),
                ('_dialogued', models.BooleanField(db_column='dialogued', verbose_name='Dialogued')),
                ('_daydreamed', models.BooleanField(db_column='daydreamed', verbose_name='Day Dreamed')),
                ('_past_week_sleep_hrs', models.IntegerField(db_column='past_week_sleep_hours', verbose_name='Past Week Sleep Hours')),
                ('_mood', models.IntegerField(db_column='mood', verbose_name='Mood')),
                ('_relaxation', models.IntegerField(db_column='relaxation', verbose_name='Relaxation')),
                ('_iterations', models.IntegerField(db_column='iterations', verbose_name='Iterations')),
            ],
            options={
                'verbose_name': 'Relation Context',
                'verbose_name_plural': 'Relations Contexts',
                'db_table': 'relations_contexts',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_tag', models.CharField(db_column='tag', max_length=50, verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('datesmixin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='generalizing_core.datesmixin')),
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'db_table': 'challenges',
            },
            bases=('generalizing_core.datesmixin', models.Model),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('datesmixin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='generalizing_core.datesmixin')),
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_name', models.CharField(db_column='name', max_length=100, verbose_name='Name')),
                ('_description', models.TextField(db_column='description', verbose_name='Description')),
                ('_origin', models.CharField(choices=[('Personal Experience', 'Personal Experience'), ('Book', 'Book'), ('Lecture', 'Lecture'), ('Film', 'Film'), ('Theater Play', 'Theater Play'), ('Video', 'Video'), ('Video Game', 'Video Game'), ('Song', 'Song'), ('Article', 'Article'), ('Relation', 'Relation'), ('Lesson', 'Lesson'), ('Interpretation', 'Interpretation'), ('Other', 'Other')], db_column='origin', max_length=100, verbose_name='Origin')),
                ('_domain', models.CharField(blank=True, choices=[('Computer Science', 'Computer Science'), ('Physics', 'Physics'), ('Philosophy', 'Philosophy'), ('Design', 'Design'), ('Art', 'Art'), ('Electrical Engineering', 'Electrical Engineering'), ('Software Engineering', 'Software Engineering'), ('Aerospace Engineering', 'Aerospace Engineering'), ('Mechanical Engineering', 'Mehcanical Engineering'), ('Biology', 'Biology'), ('Chemestry', 'Chemestry'), ('Mathematics', 'Mathematics'), ('Literature', 'Literature'), ('Music', 'Music'), ('Law', 'Law'), ('Business', 'Business'), ('Economics', 'Economics'), ('Political Science', 'Political Science'), ('Arquitecture', 'Arquitecture'), ('Anthropology', 'Anthropology'), ('Medicine', 'Medicine'), ('Education', 'Education'), ('Other', 'Other')], db_column='domain', max_length=100, null=True, verbose_name='Domain')),
                ('_tags', models.ManyToManyField(blank=True, db_column='tag', to='generalizing_core.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'db_table': 'lessons',
            },
            bases=('generalizing_core.datesmixin', models.Model),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('datesmixin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='generalizing_core.datesmixin')),
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_name', models.CharField(blank=True, db_column='name', max_length=30, null=True, verbose_name='Name')),
                ('_password', models.CharField(blank=True, max_length=240, null=True, verbose_name='Password')),
                ('email', models.EmailField(db_column='email', max_length=254, unique=True, verbose_name='Email Address')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            bases=('generalizing_core.datesmixin', models.Model),
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('datesmixin_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='generalizing_core.datesmixin')),
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_explanation', models.TextField(db_column='explanation', verbose_name='Explanation')),
                ('_type', models.CharField(blank=True, choices=[('Could Benefit From', 'Could Benefit From'), ('Could Solve', 'Could Solve'), ('Could Combine To Create', 'Could Combine To Create'), ('Could Contrast To Create', 'Could Contrast To Create'), ('Could Be A Cause', 'Could Cause Be A Cause')], db_column='domain', max_length=50, null=True, verbose_name='Domain')),
                ('_challenge', models.ForeignKey(blank=True, db_column='challenge', null=True, on_delete=django.db.models.deletion.SET_NULL, to='generalizing_core.challenge', verbose_name='Challenge')),
                ('_lessons', models.ManyToManyField(db_column='lesson', to='generalizing_core.Lesson', verbose_name='Lessons')),
                ('_user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.PROTECT, to='generalizing_core.user', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Relation',
                'verbose_name_plural': 'Relations',
                'db_table': 'relations',
            },
            bases=('generalizing_core.datesmixin', models.Model),
        ),
        migrations.AddField(
            model_name='lesson',
            name='_user',
            field=models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.PROTECT, to='generalizing_core.user', verbose_name='User'),
        ),
        migrations.CreateModel(
            name='Expertise',
            fields=[
                ('_id', models.AutoField(auto_created=True, db_column='id', primary_key=True, serialize=False, verbose_name='ID')),
                ('_uuid', models.UUIDField(db_column='uuid', default=uuid.uuid4, editable=False, unique=True)),
                ('_area', models.CharField(blank=True, choices=[('Computer Science', 'Computer Science'), ('Physics', 'Physics'), ('Philosophy', 'Philosophy'), ('Design', 'Design'), ('Art', 'Art'), ('Electrical Engineering', 'Electrical Engineering'), ('Software Engineering', 'Software Engineering'), ('Aerospace Engineering', 'Aerospace Engineering'), ('Mechanical Engineering', 'Mehcanical Engineering'), ('Biology', 'Biology'), ('Chemestry', 'Chemestry'), ('Mathematics', 'Mathematics'), ('Literature', 'Literature'), ('Music', 'Music'), ('Law', 'Law'), ('Business', 'Business'), ('Economics', 'Economics'), ('Political Science', 'Political Science'), ('Arquitecture', 'Arquitecture'), ('Anthropology', 'Anthropology'), ('Medicine', 'Medicine'), ('Education', 'Education'), ('Other', 'Other')], db_column='domain', max_length=100, null=True, verbose_name='Domain')),
                ('_description', models.TextField(blank=True, db_column='description', null=True, verbose_name='Description')),
                ('_user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.CASCADE, to='generalizing_core.user', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Expertise',
                'verbose_name_plural': 'Expertises',
                'db_table': 'expertises',
            },
        ),
        migrations.AddField(
            model_name='challenge',
            name='_lesson_1',
            field=models.ForeignKey(db_column='lesson_1', on_delete=django.db.models.deletion.PROTECT, related_name='lesson_1', to='generalizing_core.lesson', verbose_name='Lesson 1'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='_lesson_2',
            field=models.ForeignKey(db_column='lesson_2', on_delete=django.db.models.deletion.PROTECT, related_name='lesson_2', to='generalizing_core.lesson', verbose_name='Lesson 2'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='_user',
            field=models.ManyToManyField(db_column='user', to='generalizing_core.User', verbose_name='User'),
        ),
    ]
